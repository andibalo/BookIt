// LOGO //

.logo {
  height: 4rem;
  margin-left: 3rem;
}

// SEARCH //

.search {
  flex: 0 0 40%;
  display: flex;

  @media (max-width: $bp-smallest) {
    order: 1;
    flex: 0 0 100%;
    background-color: var(--grey-light-2);
  }
  //ALIG ITEMS STRETCH
  //align items center centers flex-tems vertically but the height depends on content
  //default value is stretched which sets the height of flex-items to 100% relative to flex container
  //align items stretch makes all the flex item the same height
  align-items: center;
  justify-content: center;

  &__input {
    width: 90%;
    border-radius: 80px;
    outline: none;
    border: none;
    padding: 1rem 2rem;
    background-color: var(--grey-light-2);
    transition: all 0.2s;
    margin-right: -3.25rem;

    &:focus {
      width: 100%;
      background-color: var(--grey-light-3);
    }
  }

  //input focus is placed outside &input because if placed inside &button cannot be found in children of &input
  &__input:focus + &__button {
    background-color: var(--grey-light-3);
  }

  &__button {
    border: none;
    background: var(--grey-light-2);
    transition: all 0.3s;

    //when button is clicked its in focus state
    &:focus {
      outline: none;
    }

    &:focus {
      transform: translateY(-3px);
    }
  }

  &__icon {
    height: 2rem;
    width: 2rem;
    fill: var(--grey-dark-3);
  }
}

// USER NAV //

.user-nav {
  display: flex;
  align-items: center;

  //we use align self strecth to fill the usernav cont bcs aling item center in flex parent causes its height to auto
  align-self: stretch;

  //> selector is direct child of user-nav so it selects all direct child of user-nav ( 2 icon-box 1 user )
  & > * {
    padding: 0 2rem;
    height: 100%;
    cursor: pointer;
    display: flex;
    align-items: center;
  }

  & > *:hover {
    background: var(--grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--grey-dark-2);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: red;
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.3rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    width: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
    object-fit: cover;
  }

  &__user-name {
    color: var(--grey-dark-2);
    font-weight: 600;
    font-size: 14px;
  }
}

// SIDEBAR //

.side-nav {
  font-size: 1.6rem;
  margin-top: 3.5rem;
  list-style: none;

  @media (max-width: $bp-medium) {
    display: flex;
    margin: 0;
  }

  &__item {
    position: relative;

    //the same as selecting side-nav__item:not(:last-child)
    //it is not looking for a child inside __item because we dont specify class or id
    &:not(:last-child) {
      margin-bottom: 0.5rem;

      @media (max-width: $bp-medium) {
        margin: 0;
      }
    }

    @media (max-width: $bp-medium) {
      flex: 1;
    }
  }

  &__item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 0.5rem;
    background: var(--grey-light-1);
    transform: scaleY(0);
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s;
    //DELAY IN TRANSITION
    //in transisition property the 3rd time val is the delay for the animation
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  &__item--active {
    .side-nav__link:link,
    .side-nav__link:visited {
      color: var(--color-primary);
    }
  }

  &__item:active::before {
    background: var(--color-lighter);
  }

  &__link:link,
  &__link:visited {
    position: relative;
    z-index: 10;
    color: var(--grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;
    display: flex;
    align-items: center;
    transition: all 0.3s;

    @media (max-width: $bp-small) {
      flex-direction: column;
      font-size: 1.3rem;
    }
  }

  &__item:hover > &__link {
    color: var(--color-primary);
  }

  &__icon {
    height: 1.75rem;
    width: 1.75rem;
    fill: currentColor;
    margin-right: 1.5rem;

    @media (max-width: $bp-small) {
      margin-right: 0;
    }
  }
}

// LEGAL //

.legal {
  font-size: 1.2rem;
  text-align: center;
  padding: 2.5rem;
  color: var(--grey-light-1);

  @media (max-width: $bp-medium) {
    display: none;
  }
}

// GALLERY //

.gallery {
  display: flex;

  //IMAGE has to be display block bcs if inline there will be small whiet space at bottom
  &__photo {
    //flex causes the row to be deivided into 3 col and width 100% causes to photo to fit the 3 col
    width: 100%;
    display: block;
  }
}

.overview {
  display: flex;

  align-items: center;
  border-bottom: 3px solid var(--color-light);

  &__heading {
    font-size: 2.75rem;
    font-weight: 300;
    padding: 1.5rem 3rem;
    color: var(--grey-dark-2);

    @media (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  //MARGIN AUTO
  //by using margin auto we create a sapce between the group of elements we want.
  //we can also use flex grow on stars but the container width will fill the avaialble space. Not good for hover effect
  //hence we use margin auto. maintains container width relative to content but creates space between.
  &__stars {
    margin-right: auto;
    display: flex;
    align-items: center;
    margin-left: 1rem;
    color: var(--color-primary);
  }

  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;

    .overview__icon {
      margin-right: 0.5rem;
    }
  }

  &__rating {
    background: var(--color-primary);
    padding: 0 2.5rem;
    align-self: stretch;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-left: 3rem;

    &-average {
      font-size: 2rem;
      color: #fff;
      font-weight: 300;
    }

    &-votes {
      color: #fff;
      font-size: 1rem;
    }
  }
}

.btn-inline {
  border: none;
  //we set font size inherit because if we want different btn size we set fontsize in the parent
  font-size: inherit;
  padding-bottom: 2px;
  color: var(--color-primary);
  background-color: transparent;
  display: inline-block;
  //CURRENTCOLOR
  //we set border color to currentColor so its color follows the color of the ele or parent ele. Easier for hover effect
  border-bottom: 2px solid currentColor;
  cursor: pointer;

  &:hover {
    color: var(--color-light);
  }

  &:focus {
    outline: none;
    animation: jittery 2s infinite;
  }
}

@keyframes jittery {
  5%,
  50% {
    transform: scale(1);
  }

  10% {
    transform: scale(0.9);
  }

  15% {
    transform: scale(1.15);
  }

  20% {
    transform: scale(1.15) rotate(-5deg);
  }

  25% {
    transform: scale(1.15) rotate(5deg);
  }

  30% {
    transform: scale(1.15) rotate(-3deg);
  }

  35% {
    transform: scale(1.15) rotate(2deg);
  }

  40% {
    transform: scale(1.15) rotate(0);
  }
}

.paragraph:not(:last-of-type) {
  margin-bottom: 2.5rem;
}

.list {
  list-style: none;
  display: flex;
  flex-wrap: wrap;
  padding: 3rem 0;
  margin: 3rem 0;
  border-top: 1px solid var(--color-light);
  border-bottom: 1px solid var(--color-light);

  &__item {
    flex: 0 0 50%;
    margin-bottom: 0.7rem;
  }

  &__item::before {
    content: "";
    display: inline-block;
    height: 1.3rem;
    margin-right: 0.7rem;
    width: 1.3rem;

    //older browser
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover;

    //New Browers
    @supports (-webkit-mask-image: url()) or (-webkit-mask-size: url()) {
      -webkit-mask-image: url(../img/chevron-thin-right.svg);
      -webkit-mask-size: cover;
      mask-image: url(../img/chevron-thin-right.svg);
      mask-size: cover;
      background-color: var(--color-primary);
    }
  }
}

.recommend {
  display: flex;
  align-items: center;

  color: var(--grey-dark-2);

  &__count {
    margin-right: auto;
  }

  &__photo {
    box-sizing: content-box;
    height: 3rem;
    width: 3rem;
    border-radius: 50%;
    border: 3px solid #fff;

    &:not(:last-child) {
      margin-right: -1.2rem;
    }
  }
}

.review {
  background: white;
  box-shadow: 0 2rem 4.5em rgba(0, 0, 0, 0.06);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;

  &::before {
    content: "\201C";
    position: absolute;
    font-size: 25rem;
    top: -3rem;
    left: -1rem;
    color: var(--grey-light-3);
    line-height: 1;
    font-family: sans-serif;
    z-index: 1;
  }

  &__text {
    margin-bottom: 2rem;
    position: relative;
    z-index: 10;
  }

  &__user {
    display: flex;
    align-items: center;
  }

  &__friends {
    display: flex;
  }
  &__photo {
    height: 5rem;
    width: 5rem;
    border-radius: 50%;
    margin-right: 2rem;
  }

  &__box {
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.2rem;
    color: var(--color-primary);
    font-weight: 600;
  }

  &__user-date {
    font-size: 1rem;
    color: var(--grey-dark-1);
  }

  &__user-rating {
    font-size: 2.2rem;
    color: var(--color-primary);
  }

  & ~ .btn-inline {
    align-self: center;

    span {
      transition: margin-left 0.2s;
    }

    &:hover {
      color: var(--grey-dark-2);

      & span {
        margin-left: 8px;
      }
    }
  }
}

.cta {
  text-align: center;
  padding: 3rem 0;

  &__book-now {
    font-size: 2rem;
    color: var(--grey-dark-2);
    text-transform: uppercase;
    margin-bottom: 2rem;
  }
}

.btn {
  border-radius: 100px;
  border: none;
  color: #fff;
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  background-image: linear-gradient(
    to right,
    var(--color-light),
    var(--color-primary)
  );

  &__visible {
    display: inline-block;
    padding: 2rem 7.5rem;
    height: 100%;
    width: 100%;
    transition: all 0.2s;
  }

  &__invisible {
    display: inline-block;
    height: 100%;
    width: 100%;
    padding: 2rem 0;
    position: absolute;
    top: -100%;
    left: 0;
    transition: all 0.2s;
  }

  &:hover &__invisible {
    top: 0;
  }

  &:hover &__visible {
    transform: translateY(100%);
  }

  &:focus {
    outline: none;
  }
}
